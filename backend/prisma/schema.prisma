// TipJar/backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enumy ---

enum UserRole {
  FAN
  CREATOR
  ADMIN
}

enum TipStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

// --- Modele Danych ---

model User {
  id          String   @id @default(uuid())
  email       String?  @unique
  password    String?
  displayName String
  username    String?  @unique
  avatarUrl   String?
  role        UserRole @default(FAN)

  // Flagi statusu konta i weryfikacji
  isActive                        Boolean   @default(true)
  isEmailVerified                 Boolean   @default(false)
  emailVerificationToken          String?   @unique
  emailVerificationTokenExpiresAt DateTime?

  currentHashedRefreshToken String? @db.Text

  // Powiązanie z portfelem Circle
  circleWalletId        String? @unique
  mainWalletAddress     String? @unique
  isCircleSetupComplete Boolean @default(false)

  // <<< TA LINIA ZOSTAŁA DODANA
  hasCompletedOnboarding Boolean @default(false)
  // <<< I TA LINIA ZOSTAŁA DODANA
  consents               Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacje
  socialConnections SocialConnection[]
  profile           Profile?
  tipsSent          Tip[]              @relation("TipsSentByFan")
  tipsReceived      Tip[]              @relation("TipsReceivedByCreator")

  payouts         Payout[]
  overlaySettings OverlaySettings?

  circleWallet CircleWallet?
}

model SocialConnection {
  id         String @id @default(cuid())
  provider   String
  providerId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerId])
  @@index([userId])
}

model Profile {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bio       String? @db.Text
  bannerUrl String?

  customTipJarUrlSuffix String? @unique

  acceptsTips Boolean @default(true)

  websiteUrl String?
  twitterUrl String?
  youtubeUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tip {
  id       String  @id @default(uuid())
  amount   Decimal
  currency String  @default("USDC")

  message     String? @db.Text
  isAnonymous Boolean @default(false)

  status TipStatus @default(PENDING)

  fanId String?
  fan   User?   @relation("TipsSentByFan", fields: [fanId], references: [id], onDelete: SetNull)

  creatorId String
  creator   User   @relation("TipsReceivedByCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  blockchainTransactionHash String? @unique
  circleTransferId          String? @unique
  paymentGatewayChargeId    String? @unique

  platformFeeAmount   Decimal?
  netAmountForCreator Decimal?

  createdAt   DateTime  @default(now())
  processedAt DateTime?
  updatedAt   DateTime  @updatedAt

  @@index([fanId])
  @@index([creatorId])
  @@index([status])
}

model OverlaySettings {
  creatorId              String  @id @unique
  position               String
  opacity                Float
  bgColor                String
  textColor              String
  durationSec            Int
  fontFamily             String
  entryAnimation         String
  specialEffectThreshold Int
  specialEffectType      String
  soundEffectUrl         String?

  creator User @relation(fields: [creatorId], references: [id])
}

model Payout {
  id                  String       @id @default(uuid())
  creatorId           String
  creator             User         @relation(fields: [creatorId], references: [id])
  amount              Decimal
  currency            String       @default("USDC")
  destinationAddress  String
  circleTransactionId String?      @unique
  status              PayoutStatus @default(PENDING)
  requestedAt         DateTime     @default(now())
  processedAt         DateTime?
  failureReason       String?

  @@index([creatorId])
}

model CircleWallet {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  circleWalletId    String @unique
  mainWalletAddress String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
